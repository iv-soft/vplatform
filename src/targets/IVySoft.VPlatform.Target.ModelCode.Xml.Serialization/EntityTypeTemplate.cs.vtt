@inherits IVySoft.VPlatform.Target.ModelCode.Xml.Serialization.EntityTypeContext
@using System.Linq
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Xml.Serialization;
using System.Linq;

namespace @Module.Namespace@.Xml.Serialization
{
    [XmlRoot(Namespace = XmlConfig.Namespace)]
    public class @EntityType.Name
    {
		@foreach(var property in EntityType.Properties)
		{
		@:[XmlElement()]
		@:public @property.Type @property.Name { get; set; }
		}

		@foreach(var association in Module.Associations.Where(x => x.Left.Type == EntityType.Name))
		{
			@if(association.Left.Multiplicity == "0..*" || association.Left.Multiplicity == "1..*")
			{
        @:[XmlArray()]
		@:public @(association.Right.Type)[] @association.Left.Property { get; set; }
			}
		}

		@foreach(var association in Module.Associations.Where(x => x.Right.Type == EntityType.Name))
		{
			@if(association.Right.Multiplicity == "0..*" || association.Right.Multiplicity == "1..*")
			{
        @:[XmlArray()]
		@:public @(association.Left.Type)[] @association.Right.Property { get; set; }
			}
		}

		public @Module.Namespace.@EntityType.Name ToModel()
        {
            return new @Module.Namespace.@EntityType.Name
            {
			@foreach(var property in EntityType.Properties)
			{
				if(property.ResolvedType.Kind == "Primitive")
				{
				@:@property.Name = this.@property.Name,
				}
				else
				{
				@:@property.Name = this.@property.Name@?.ToModel(),
				}
			}
		@foreach(var association in Module.Associations.Where(x => x.Left.Type == EntityType.Name))
		{
			@if(association.Left.Multiplicity == "0..*" || association.Left.Multiplicity == "1..*")
			{
		@:@association.Left.Property = new List<@Module.Namespace.@association.Right.Type>((this.@association.Left.Property == null) ? new @Module.Namespace.@association.Right.Type@[0] : this.@association.Left.Property@.Select(x => x.ToModel())),
			}
		}
		@foreach(var association in Module.Associations.Where(x => x.Right.Type == EntityType.Name))
		{
			@if(association.Right.Multiplicity == "0..*" || association.Right.Multiplicity == "1..*")
			{
		@:@association.Right.Property = new List<@Module.Namespace.@association.Left.Type>((this.@association.Right.Property == null) ? new @Module.Namespace.@association.Left.Type@[0] : this.@association.Right.Property@.Select(x => x.ToModel())),
			}
		}
            };
        }

    }
}